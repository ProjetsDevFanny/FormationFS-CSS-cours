/* Variables pour les thèmes de couleurs (souvent 4 couleurs par plus) */
:root {
  --color1: rgb(227, 248, 202);
  --color2: rgb(231, 145, 205);
  --color3: rgb(149, 144, 241);
  --color4: rgb(145, 231, 181);
  --color5: rgb(238, 22, 22);
}

* {
  /* Pour enlever tous les margin et padding de tous les éléments */
  margin: 0;
  padding: 0;
  box-sizing: border-box; /* Aide à mieux arranger nos boîtes */
}

body {
  background: url(/assets/sunrise.png) center/cover; /* Pour que ça couvre la largeur */
  height: 100vh; /* Pour que ça couvre toute la hauteur du body = tu fais 100% de la taille que l'utilisateur a*/
  /* POUR LES WIDTH = EN % ! */
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  color: var(--color1);
  display: flex;
  align-items: center;
  /* La suite ne fait rien, car la div est en display: block */
  justify-content: center;
}

.card {
  background: rgba(0, 0, 0, 0.258);
  /* Méthode qui fait des calculs: ici taille max moins 50px de chaque côté :*/
  width: calc(100% - 50px);
  padding: 20px 20px 6px; /* haut (gauche et droite) bas */
  box-shadow: 0px 0px 11px 6px rgba(0, 0, 0, 0.662);
  border-radius: 6px;
  /* Filtre flou derrière : */
  backdrop-filter: blur(5px);
}

.card::before {
  /* Toujours un content avec before et after ! */
  /* Insertion d'une icône depuis site "HTML Symbols" */
  content: "\2606";
  position: absolute;
  top: -2px;
  right: 10px;
  /* Pour agrandir l'icône: */
  font-size: 2rem;
}

h1 {
  /* Détache le titre du texte: */
  margin-bottom: 21px;
}

.grid-container {
  display: grid;
   /* POUR LES WIDTH = EN % ! */
  grid-template-columns: 20% 80%;
}

.polygon-container {
  /* propriété pour ombre du polygone: */
  filter: drop-shadow(1px 15px 3px #fadc7881);
  /* Pour centrer l'enfant, comme ci-après, il faut mettre le parent en grid: place-self: center; */
  /* place-self: center left; */
  place-self: center left;
 
}

.polygon {
  clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
  /* Gradient de couleur: direction: 135deg, on commence à jaune et on fini à rouge: il vaut mieux rester en 2 couleurs slmt */
  /* background: linear-gradient(135deg, var(--color2) 0%, var(--color3) 100%); */
  background-image: linear-gradient(-20deg, #fadc78 10%, #d74a23 80%);
  height: 100px;
  /* On ne peut pas donner d'ombre directement au polygone: il faudra passer par son parent et une propriété différente */
  /* En grid, dans tous les cas, les éléments font width: 100%, c'est moche */
  width: 100px;
}

.polygon::after {
  content: "CSS 3";
  position: absolute;
  color: var(--color5);
  font-weight: 500;
  /* background: #e2ed1529; */
  /* La, l'élément sera centré par rapport à son coin haut gauche */
  top: 50%;
  left: 50%;
  /* Pour centre par rapport au centre de l'élément: */
  transform: translate(-50%, -50%) rotate(360deg);
  width: 90px;
  padding: 4px;
  text-align: center;
}

p {
  line-height: 28px;
  margin: 20px 0;
  /* Méthode assez récente: webkit */
  /* S on souhaite que notre paragraphe face 20 lignes quoi qu'il en soit (pour ne pas bouger toute la page */
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 4;
  /* VScode demande d'écrire tout de même la proriété: line-clamp: */
  line-clamp: 4;
  overflow: hidden;
  text-align: justify;
}

/* Pour changer la couleur de la sélection du texte: */
p::selection {
  background: #f091044b;
  color: rgb(0, 0, 0);
}

.checkbox-container {
  display: flex;
  justify-content: space-evenly;
  margin: 20px 0 30px;
  /* haut dr/gche bas */
}

/* Pour enlever la case cochée de la checkbox */
input[type="checkbox"] {
  display: none;
}

/* Quand l'input est coché, tu m'appliques le style du label qui suit: */
input[type="checkbox"]:checked + label {
background: rgba(156, 134, 243, 0.39);
/* background-image: linear-gradient(-20deg, #fadc78 10%, #d74a23 80%); */
transform: scale(1.1);
filter: brightness(105%) /* blur(5px); */
}
/* Quand l'input est coché, tu m'appliques le style de tous labels qui suivent: */
/* input[type="checkbox"]:checked ~ label {
background: var(--color3);
} */

label {
  cursor: pointer;
  border: 1px solid var(--color4);
  padding: 10px;
  border-radius: 10px;
  /* Mettre les animations sur les labels pour l'avoir en entrée et en sortie */
  transition: 0.2s;
  /* Utilisateur ne peut pas sélectionner le texte. */
  user-select: none;
}

.e-mail {
  text-align: center;
  margin-bottom: 20px;
}

.e-mail input {
  padding: 5px;
  border-radius: 6px;
  outline: none;
  /* Ajouter cette bordure pour ne pas faire bouger tout le texte du haut quand on focus sur le e-mail. */
  border: 3px solid transparent;
  transition: 0.3s;
  text-align: center;
  font-size: 1.1rem;
  color: var(--color3);
  /* Faire un responsive plus facilement: entre 180px et 300px, la width = 35%, au-delà la taille ne changera pas.*/
  min-width: 180px;
  width: 35%;
  max-width: 300px;
}

input[type="text"]:focus {
  background: transparent;
  border: 3px solid var(--color2);
  /* Attention quand on ajoute cette bordure, cela déforme et bouge le texte au dessus ! Moche ! */
  border-radius: 50px;
}

input[type="text"]::placeholder {
  color: var(--color3);
  font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
}

button {
  cursor: pointer;
  background: var(--color2)  ;
  color: rgb(99, 15, 94);
  border: none;
  font-size: 1.3rem;
  font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
  padding: 10px 20px;
  border-radius: 50px;
  /* Centrage du bouton: attention il est en display: inline-block !(= il est centré dans la zone dans laquelle il est surbrillé, dans l'inspecteur) donc "margin:0 auto" ne marche pas ! Donc il faut qu'il soit en "inline:block" = Cf inspecter pour votre sa zone de surbrillance */
  margin: 0 auto;
  display: block;
  /* Attention la transition dans le button et pas dans le hover, pour avoir aussi l'effet quand on sort */
  transition: 0.5s;
}

button:hover {
  letter-spacing: 2px;
}

/* vidéo: 1:20 */
